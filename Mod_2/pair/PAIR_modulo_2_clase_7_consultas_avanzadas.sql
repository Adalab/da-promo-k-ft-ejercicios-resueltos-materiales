-- pair programming clase 8 modulo 2. consultas avanzadas
USE northwind;
/*
Productos m√°s baratos y caros de nuestra BBDD:
Desde la divisi√≥n de productos nos piden conocer el precio de los productos que tienen el precio m√°s alto 
y m√°s bajo. Dales el alias lowestPrice y highestPrice.
*/

-- product_code,product_name,product_line,product_scale,product_vendor,product_description,quantity_in_stock,buy_price,msrp

SELECT 
    MIN(UnitPrice) AS lowestPrice,
    MAX(UnitPrice) AS highestPrice
FROM 
    products;


/*Conociendo el numero de productos y su precio medio:
Adicionalmente nos piden que dise√±emos otra consulta para conocer el n√∫mero de productos y el precio medio de todos ellos 
(en general, no por cada producto).
*/

SELECT 
    COUNT(*) AS productos_totales,
    AVG(UnitPrice) AS promedio_producto
FROM 
    products;



/*Sacad la m√°xima y m√≠nima carga de los pedidos de UK:
Nuestro siguiente encargo consiste en preparar una consulta que devuelva la m√°xima y m√≠nima cantidad de carga para un pedido (freight)
 enviado a Reino Unido (United Kingdom).*/
 
SELECT MIN(freight) AS LowFreight, MAX(freight) AS HighFreight 
FROM orders WHERE ShipCountry = 'UK';

/*Qu√© productos se venden por encima del precio medio:
Despu√©s de analizar los resultados de alguna de nuestras consultas anteriores, desde el departamento de Ventas quieren conocer qu√© productos
 en concreto se venden por encima del precio medio para todos los productos de la empresa, ya que sospechan que dicho n√∫mero es demasiado elevado.
 Tambi√©n quieren que ordenemos los resultados por su precio de mayor a menor.

üìåNOTA: para este ejercicio puedes necesitar dos consultas separadas y usar el resultado de la primera para filtrar la segunda.
*/

SELECT AVG(UnitPrice) as Precio_Medio  
FROM products;

SELECT DISTINCT ProductName, UnitPrice  
FROM products 
WHERE UnitPrice > (28.86)  
ORDER BY UnitPrice DESC;

/*Qu√© productos se han descontinuado:
De cara a estudiar el hist√≥rico de la empresa nos piden una consulta para conocer el n√∫mero de productos que se han descontinuado. 
El atributo Discontinued es un booleano: si es igual a 1 el producto ha sido descontinuado.*/

SELECT COUNT(ProductName) 
FROM products
WHERE Discontinued = 1;

/*Detalles de los productos de la query anterior:
Adicionalmente nos piden detalles de aquellos productos no descontinuados, sobre todo el ProductID y ProductName. 
Como puede que salgan demasiados resultados, nos piden que los limitemos a los 10 con ID m√°s elevado, que ser√°n los m√°s recientes. 
No nos pueden decir del departamento si habr√° pocos o muchos resultados, pero lo limitamos por si acaso.*/

SELECT ProductID, ProductName  
FROM products 
WHERE discontinued = 0  
ORDER BY ProductId DESC 
LIMIT 10;

/*Relaci√≥n entre n√∫mero de pedidos y m√°xima carga:
Desde log√≠stica nos piden el n√∫mero de pedidos y la m√°xima cantidad de carga de entre los mismos (freight) que han sido enviados por 
cada empleado (mostrando el ID de empleado en cada caso).*/

SELECT COUNT(*) AS cant_pedidos, MAX(Freight) AS cant_carga, EmployeeID 
FROM orders
GROUP BY EmployeeID; 

/*Descartar pedidos sin fecha y ord√©nalos:
Una vez han revisado los datos de la consulta anterior, nos han pedido afinar un poco m√°s el "disparo". En el resultado anterior se han
 incluido muchos pedidos cuya fecha de env√≠o estaba vac√≠a, por lo que tenemos que mejorar la consulta en este aspecto. Tambi√©n nos piden que 
 ordenemos los resultados seg√∫n el ID de empleado para que la visualizaci√≥n sea m√°s sencilla.*/


SELECT COUNT(*), MAX(Freight), EmployeeID  
FROM orders 
WHERE ShippedDate IS NOT NULL  
GROUP BY  EmployeeID  
ORDER BY EmployeeID; 


/* N√∫meros de pedidos por d√≠a:
El siguiente paso en el an√°lisis de los pedidos va a consistir en conocer mejor la distribuci√≥n de los mismos seg√∫n las fechas. Por lo tanto,
 tendremos que generar una consulta que nos saque el n√∫mero de pedidos para cada d√≠a, mostrando de manera separada el d√≠a (DAY()), el mes (MONTH())
 y el a√±o (YEAR()).*/
 
SELECT COUNT(*) AS OrderCount, DAY(OrderDate) AS OrderDay, MONTH(OrderDate) AS OrderMonth, YEAR(OrderDate) AS OrderYear  
FROM orders 
GROUP BY OrderDate  
ORDER BY OrderDate;  

/*N√∫mero de pedidos por mes y a√±o:
La consulta anterior nos muestra el n√∫mero de pedidos para cada d√≠a concreto, pero esto es demasiado detalle. Genera una modificaci√≥n de la consulta
 anterior para que agrupe los pedidos por cada mes concreto de cada a√±o.*/
 
SELECT COUNT(*) AS OrderCount, MONTH(OrderDate) AS OrderMonth, YEAR(OrderDate) AS OrderYear  
FROM orders  
GROUP BY  OrderDate  
ORDER BY OrderDate;

/* Seleccionad las ciudades con 4 o m√°s empleadas:
Desde recursos humanos nos piden seleccionar los nombres de las ciudades con 4 o m√°s empleadas de cara a estudiar la apertura de nuevas oficinas.*/

SELECT City, COUNT(EmployeeID) AS NumEmpleadas
FROM employees
GROUP BY City
HAVING COUNT(EmployeeID) >= 4;

/* Cread una nueva columna bas√°ndonos en la cantidad monetaria:
Necesitamos una consulta que clasifique los pedidos en dos categor√≠as ("Alto" y "Bajo") en funci√≥n de la cantidad monetaria total que han supuesto: 
por encima o por debajo de 2000 euros.*/

SELECT OrderID, SUM(UnitPrice * Quantity) AS CantidadDinero,
CASE WHEN  SUM(UnitPrice * Quantity) < 2000 THEN "Bajo"
	ELSE "Alto"
	END AS costes
    FROM orderdetails
GROUP BY OrderID;